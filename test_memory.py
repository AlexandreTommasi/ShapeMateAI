#!/usr/bin/env python3
"""
Teste do sistema de mem√≥ria dos agentes
"""

from core.core import core_system, AgentType, TaskType, TaskPriority
from web.app import SimpleNutritionistAgent

def test_memory_system():
    """Testa se o sistema de mem√≥ria est√° funcionando"""
    
    print("üß† Testando sistema de mem√≥ria...")
    
    try:
        # Registrar agente
        agent = SimpleNutritionistAgent()
        core_system.register_agent(agent)
        print("‚úÖ Agente registrado")
        
        # Criar configura√ß√£o de sistema
        config = core_system.create_system_config(
            agent_type=AgentType.NUTRITIONIST,
            task_type=TaskType.CONSULTATION,
            user_id='test_user',
            session_id='test_session',
            priority=TaskPriority.MEDIUM
        )
        print("‚úÖ Sistema configurado")
        
        # Primeira mensagem
        result1 = core_system.process_user_message(
            user_id='test_user',
            session_id='test_session',
            message='Ol√°, me chamo Jo√£o e tenho 25 anos',
            user_profile={'name': 'Jo√£o', 'age': 25}
        )
        
        print("üìù Primeira mensagem processada")
        memory_info = core_system.get_session_memory_info('test_user', 'test_session')
        print(f"   Mem√≥ria: {memory_info}")
        
        if result1['success']:
            print(f"   Resposta: {result1['response'][:100]}...")
        else:
            print(f"   Erro: {result1.get('error')}")
        
        # Segunda mensagem - teste de mem√≥ria
        result2 = core_system.process_user_message(
            user_id='test_user',
            session_id='test_session',
            message='Qual √© meu nome?',
            user_profile={'name': 'Jo√£o', 'age': 25}
        )
        
        print("üß† Segunda mensagem processada (teste de mem√≥ria)")
        memory_info = core_system.get_session_memory_info('test_user', 'test_session')
        print(f"   Mem√≥ria: {memory_info}")
        
        if result2['success']:
            print(f"   Resposta: {result2['response'][:100]}...")
            # Verificar se a IA lembrou do nome
            if 'Jo√£o' in result2['response'] or 'jo√£o' in result2['response']:
                print("‚úÖ IA LEMBROU DO NOME! Sistema de mem√≥ria funcionando!")
            else:
                print("‚ùå IA n√£o lembrou do nome. Verificar implementa√ß√£o.")
        else:
            print(f"   Erro: {result2.get('error')}")
        
        # Resumo da conversa
        summary = core_system.get_conversation_summary('test_user', 'test_session', 5)
        print("\nüìã Resumo da conversa:")
        for i, msg in enumerate(summary, 1):
            print(f"   {i}. [{msg['type']}]: {msg['content'][:50]}...")
        
        print("\nüéØ Teste conclu√≠do!")
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_memory_system()
