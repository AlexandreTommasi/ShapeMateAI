"""
Ferramentas administrativas para o ShapeMateAI
Script para gerenciar contas de usu√°rios no banco de dados
"""

import sys
import os

# Adicionar o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.services import get_database_service
import sqlite3

class AdminTools:
    """Ferramentas administrativas para gerenciar usu√°rios"""
    
    def __init__(self):
        self.db_service = get_database_service()
        self.db_path = self.db_service.db_path
    
    def list_users(self):
        """Lista todos os usu√°rios cadastrados"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT u.id, u.email, u.created_at, p.name, p.age, p.weight, p.height
            FROM users u
            LEFT JOIN user_profiles p ON u.id = p.user_id
            ORDER BY u.created_at DESC
        ''')
        
        users = cursor.fetchall()
        conn.close()
        
        if not users:
            print("‚ùå Nenhum usu√°rio encontrado no banco de dados.")
            return []
        
        print("\nüìã USU√ÅRIOS CADASTRADOS:")
        print("=" * 80)
        print(f"{'ID':<8} {'EMAIL':<25} {'NOME':<20} {'CRIADO EM':<20}")
        print("-" * 80)
        
        for user in users:
            user_id = user[0][:8] + "..." if len(user[0]) > 8 else user[0]
            email = user[1]
            created_at = user[2]
            name = user[3] if user[3] else "N/A"
            
            print(f"{user_id:<8} {email:<25} {name:<20} {created_at:<20}")
        
        print("=" * 80)
        return users
    
    def delete_user_by_email(self, email):
        """Remove um usu√°rio pelo email"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            # Verificar se o usu√°rio existe
            cursor.execute("SELECT id, email FROM users WHERE email = ?", (email,))
            user = cursor.fetchone()
            
            if not user:
                print(f"‚ùå Usu√°rio com email '{email}' n√£o encontrado.")
                return False
            
            user_id = user[0]
            
            # Confirmar exclus√£o
            print(f"\n‚ö†Ô∏è  ATEN√á√ÉO: Voc√™ est√° prestes a EXCLUIR permanentemente:")
            print(f"   üìß Email: {user[1]}")
            print(f"   üÜî ID: {user_id}")
            
            confirm = input("\n‚ùì Confirma a exclus√£o? Digite 'CONFIRMAR' para continuar: ")
            
            if confirm != "CONFIRMAR":
                print("‚ùå Opera√ß√£o cancelada.")
                return False
            
            # Excluir em ordem (devido √†s foreign keys)
            cursor.execute("DELETE FROM chat_messages WHERE session_id IN (SELECT id FROM chat_sessions WHERE user_id = ?)", (user_id,))
            cursor.execute("DELETE FROM chat_sessions WHERE user_id = ?", (user_id,))
            cursor.execute("DELETE FROM user_profiles WHERE user_id = ?", (user_id,))
            cursor.execute("DELETE FROM users WHERE id = ?", (user_id,))
            
            conn.commit()
            
            print(f"‚úÖ Usu√°rio '{email}' foi removido com sucesso!")
            print(f"   üóëÔ∏è Dados removidos: conta, perfil, sess√µes de chat e mensagens")
            
            return True
            
        except Exception as e:
            conn.rollback()
            print(f"‚ùå Erro ao excluir usu√°rio: {str(e)}")
            return False
        finally:
            conn.close()
    
    def delete_user_by_id(self, user_id):
        """Remove um usu√°rio pelo ID"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            # Verificar se o usu√°rio existe
            cursor.execute("SELECT email FROM users WHERE id = ?", (user_id,))
            user = cursor.fetchone()
            
            if not user:
                print(f"‚ùå Usu√°rio com ID '{user_id}' n√£o encontrado.")
                return False
            
            return self.delete_user_by_email(user[0])
            
        except Exception as e:
            print(f"‚ùå Erro ao buscar usu√°rio: {str(e)}")
            return False
        finally:
            conn.close()
    
    def clear_all_users(self):
        """Remove TODOS os usu√°rios (usar com cuidado!)"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            # Contar usu√°rios
            cursor.execute("SELECT COUNT(*) FROM users")
            user_count = cursor.fetchone()[0]
            
            if user_count == 0:
                print("‚ùå N√£o h√° usu√°rios para remover.")
                return False
            
            print(f"\n‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è  ATEN√á√ÉO M√ÅXIMA ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è")
            print(f"Voc√™ est√° prestes a EXCLUIR TODOS os {user_count} usu√°rios!")
            print(f"Esta a√ß√£o √© IRREVERS√çVEL!")
            
            confirm1 = input("\n‚ùì Digite 'EXCLUIR TODOS' para continuar: ")
            if confirm1 != "EXCLUIR TODOS":
                print("‚ùå Opera√ß√£o cancelada.")
                return False
            
            confirm2 = input("‚ùì Tem certeza ABSOLUTA? Digite 'SIM TENHO CERTEZA': ")
            if confirm2 != "SIM TENHO CERTEZA":
                print("‚ùå Opera√ß√£o cancelada.")
                return False
            
            # Excluir tudo em ordem
            cursor.execute("DELETE FROM chat_messages")
            cursor.execute("DELETE FROM chat_sessions")
            cursor.execute("DELETE FROM user_profiles")
            cursor.execute("DELETE FROM users")
            
            conn.commit()
            
            print(f"‚úÖ Todos os {user_count} usu√°rios foram removidos!")
            
            return True
            
        except Exception as e:
            conn.rollback()
            print(f"‚ùå Erro ao excluir usu√°rios: {str(e)}")
            return False
        finally:
            conn.close()
    
    def get_database_stats(self):
        """Mostra estat√≠sticas do banco de dados"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute("SELECT COUNT(*) FROM users")
            user_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM user_profiles")
            profile_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM chat_sessions")
            session_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM chat_messages")
            message_count = cursor.fetchone()[0]
            
            print("\nüìä ESTAT√çSTICAS DO BANCO DE DADOS:")
            print("=" * 40)
            print(f"üë• Usu√°rios: {user_count}")
            print(f"üìã Perfis: {profile_count}")
            print(f"üí¨ Sess√µes de Chat: {session_count}")
            print(f"üí≠ Mensagens: {message_count}")
            print("=" * 40)
            
        except Exception as e:
            print(f"‚ùå Erro ao obter estat√≠sticas: {str(e)}")
        finally:
            conn.close()


def main():
    """Menu principal das ferramentas administrativas"""
    admin = AdminTools()
    
    print("üîß FERRAMENTAS ADMINISTRATIVAS - ShapeMateAI")
    print("=" * 50)
    
    while True:
        print("\nüìã OP√á√ïES DISPON√çVEIS:")
        print("1. üìã Listar todos os usu√°rios")
        print("2. üìä Ver estat√≠sticas do banco")
        print("3. üóëÔ∏è Remover usu√°rio por email")
        print("4. üóëÔ∏è Remover usu√°rio por ID")
        print("5. ‚ò¢Ô∏è Remover TODOS os usu√°rios")
        print("0. üö™ Sair")
        
        choice = input("\n‚ùì Digite sua op√ß√£o: ").strip()
        
        if choice == "0":
            print("üëã At√© logo!")
            break
        elif choice == "1":
            admin.list_users()
        elif choice == "2":
            admin.get_database_stats()
        elif choice == "3":
            email = input("\nüìß Digite o email do usu√°rio: ").strip()
            if email:
                admin.delete_user_by_email(email)
            else:
                print("‚ùå Email n√£o pode estar vazio.")
        elif choice == "4":
            user_id = input("\nüÜî Digite o ID do usu√°rio: ").strip()
            if user_id:
                admin.delete_user_by_id(user_id)
            else:
                print("‚ùå ID n√£o pode estar vazio.")
        elif choice == "5":
            admin.clear_all_users()
        else:
            print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")


if __name__ == "__main__":
    main()
